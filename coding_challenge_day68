# 1 .brute force solution
class Solution {
public:
    static bool cmp(pair<char,int>& a,pair<char,int>& b){
       return a.second<b.second;
    }
    string customSortString(string order, string s) {
        int n=s.size();
        int m=order.size();
        unordered_map<char,int> mp;
        for(int i=0;i<m;i++){
            mp[order[i]]=i+1;
            
        }
        vector<pair<char,int>> st;
        for(int i=0;i<n;i++){
            st.push_back({s[i],mp[s[i]]});
            cout<<s[i]<<" "<<mp[s[i]];
        }
        sort(st.begin(),st.end(),cmp);
        string res="";
        for(int i=0;i<n;i++){
            res+=st[i].first;
            cout<<res;
        }
        return res;

    }
};

#2.optimal solution:
class Solution {
public:
    string customSortString(string order, string s) {
        int n=s.size();
        int m=order.size();
        string res;
        unordered_map<char,int> freq;
        for(char c:s){
            freq[c]++;
        }
        for(char c:order){
            if(freq.find(c)!=freq.end()){
                res.append(freq[c],c);
                freq.erase(c);
            }
        }
        for(auto &[ch,count]:freq){
            res.append(count,ch);
        }
        return res;
    }
};
