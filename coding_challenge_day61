#Dynamic programming solution:

class Solution {
public:
    int jumpcount(vector<int>& nums,int n,vector<int>& dp){
        if(n==nums.size()-1) return 0;
        if(dp[n]!=-1) return dp[n];
        int minstep=1e9;
        int jump;
        for(int i=1;i<=nums[n];i++){
            if(n+i<nums.size()) jump=jumpcount(nums,n+i,dp) ;
            if(jump!=INT_MAX) minstep=min(minstep,jump+1);
        }
        return dp[n]=minstep;
    }
    int jump(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,-1);
        return jumpcount(nums,0,dp);
        
    }
};

#optimal solution:
class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        if(n<=1) return 0;
        int jump=0;
        int farthest=0;
        int end=0;
        for(int i=0;i<n-1;i++){
            farthest=max(farthest,nums[i]+i);
            if(i==end){
                jump++;
                end=farthest;
            }
        }
        return jump;
    }
};
